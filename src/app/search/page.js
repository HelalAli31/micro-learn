// src/app/search/page.js
'use client';

import React, { useState, useEffect } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

// Import your new components - Ensure these paths are correct for your setup
import SearchHeader from '../../../Components/ComponentsSearch/SearchHeader.jsx';
import LoadingState from '../../../Components/ComponentsSearch/LoadingState.jsx';
import ResultsSection from '../../../Components/ComponentsSearch/ResultsSection.jsx';
import VideoModal from '../../../Components/ComponentsSearch/VideoModal.jsx';
import InitialState from '../../../Components/ComponentsSearch/InitialState.jsx';
import QuizButton from '../../../Components/ComponentsSearch/QuizButton.jsx';

export default function SearchPage() {
Â  const [query, setQuery] = useState('');
Â  const [videos, setVideos] = useState([]);
Â  const [explanation, setExplanation] = useState(null);
Â  const [quiz, setQuiz] = useState([]);
Â  const [loading, setLoading] = useState(false);
Â  const [hasSearched, setHasSearched] = useState(false);
Â  const [selectedVideo, setSelectedVideo] = useState(null);
Â  const searchParams = useSearchParams();
Â  const username = searchParams.get('username'); // Username is correctly retrieved here

Â  const router = useRouter();

Â  useEffect(() => {
Â  Â  const q = searchParams.get('q');
Â  Â  if (q) {
Â  Â  Â  setQuery(q);
Â  Â  Â  handleSearch(q);
Â  Â  }
Â  }, [searchParams]);

Â  async function handleSearch(searchQuery) {
Â  Â  const searchTerm = searchQuery || query;
Â  Â  if (!searchTerm || !username) return;

Â  Â  setLoading(true);
Â  Â  setHasSearched(true);
Â  Â  setExplanation(null);
Â  Â  setQuiz([]);

Â  Â  try {
Â  Â  Â  const videosRes = await fetch(
Â  Â  Â  Â  `/api/videos?query=${encodeURIComponent(searchTerm)}`
Â  Â  Â  );
Â  Â  Â  const videosData = await videosRes.json();

Â  Â  Â  const explanationRes = await fetch(
Â  Â  Â  Â  `/api/explanation?query=${encodeURIComponent(searchTerm)}`
Â  Â  Â  );
Â  Â  Â  const explanationData = await explanationRes.json();

Â  Â  Â  setVideos(
Â  Â  Â  Â  (videosData.videos || []).map((v) => ({
Â  Â  Â  Â  Â  id: v.id,
Â  Â  Â  Â  Â  title: v.title,
Â  Â  Â  Â  Â  url: v.url,
Â  Â  Â  Â  }))
Â  Â  Â  );

Â  Â  Â  setExplanation({
Â  Â  Â  Â  text: explanationData.explanation || '',
Â  Â  Â  Â  query: explanationData.query || searchTerm,
Â  Â  Â  });

Â  Â  Â  setQuiz(explanationData.quiz || []);

Â  Â  Â  await fetch('/api/add/searchHistory', {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  username: username,
Â  Â  Â  Â  Â  value: searchTerm,
Â  Â  Â  Â  }),
Â  Â  Â  });
Â  Â  } catch (error) {
Â  Â  Â  console.error('Search error:', error);
Â  Â  Â  setExplanation(null);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }

Â  function handleSubmit(e) {
Â  Â  e.preventDefault();
Â  Â  handleSearch();
Â  }

Â  async function openVideoModal(video) {
Â  Â  setSelectedVideo(video);

Â  Â  if (username && video) {
Â  Â  Â  try {
Â  Â  Â  Â  await fetch('/api/add/videoHistory', {
Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  Â  username: username,
Â  Â  Â  Â  Â  Â  value: video.title,
Â  Â  Â  Â  Â  }),
Â  Â  Â  Â  });
Â  Â  Â  Â  console.log('Video history saved successfully!');
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error saving video history:', error);
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  console.warn('Cannot save video history: username or video is missing.');
Â  Â  }
Â  }

Â  function closeVideoModal() {
Â  Â  setSelectedVideo(null);
Â  }

Â  // --- FIX: Pass username to the quiz page ---
Â  const handleMakeQuiz = () => {
Â  Â  if (quiz.length > 0) {
Â  Â  Â  try {
Â  Â  Â  Â  const quizJsonString = JSON.stringify(quiz);
Â  Â  Â  Â  const encodedQuiz = encodeURIComponent(quizJsonString);

Â  Â  Â  Â  // ðŸ”¥ THE FIX IS HERE: Append '&username=${username}'
Â  Â  Â  Â  router.push(`/quiz?quizData=${encodedQuiz}&username=${username}`);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error encoding quiz data for URL:', error);
Â  Â  Â  Â  alert('Could not generate quiz link. Please try again.');
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  alert(
Â  Â  Â  Â  'Please perform a search and generate an explanation first to make a quiz.'
Â  Â  Â  );
Â  Â  }
Â  };
Â  // --- END FIX ---

Â  return (
Â  Â  <div className="min-h-screen bg-gray-50">
Â  Â  Â  <SearchHeader
Â  Â  Â  Â  query={query}
Â  Â  Â  Â  setQuery={setQuery}
Â  Â  Â  Â  handleSubmit={handleSubmit}
Â  Â  Â  Â  username={username}
Â  Â  Â  />

Â  Â  Â  {loading && <LoadingState />}

Â  Â  Â  {hasSearched && !loading && (
Â  Â  Â  Â  <ResultsSection
Â  Â  Â  Â  Â  explanation={explanation}
Â  Â  Â  Â  Â  videos={videos}
Â  Â  Â  Â  Â  openVideoModal={openVideoModal}
Â  Â  Â  Â  Â  quiz={quiz}
Â  Â  Â  Â  Â  hasSearched={hasSearched}
Â  Â  Â  Â  Â  loading={loading}
Â  Â  Â  Â  Â  setQuery={setQuery}
Â  Â  Â  Â  Â  setHasSearched={setHasSearched}
Â  Â  Â  Â  Â  setVideos={setVideos}
Â  Â  Â  Â  Â  setExplanation={setExplanation}
Â  Â  Â  Â  Â  setQuiz={setQuiz}
Â  Â  Â  Â  />
Â  Â  Â  )}

Â  Â  Â  {!hasSearched && !loading && <InitialState />}

Â  Â  Â  {selectedVideo && (
Â  Â  Â  Â  <VideoModal
Â  Â  Â  Â  Â  selectedVideo={selectedVideo}
Â  Â  Â  Â  Â  closeVideoModal={closeVideoModal}
Â  Â  Â  Â  />
Â  Â  Â  )}

Â  Â  Â  {username !== 'guest' && quiz.length > 0 && (
Â  Â  Â  Â  <QuizButton handleMakeQuiz={handleMakeQuiz} />
Â  Â  Â  )}
Â  Â  Â  {username !== 'guest' && hasSearched && !loading && quiz.length === 0 && explanation && (
Â  Â  Â  Â  <div className="text-center text-gray-500 mt-12 mb-10">
Â  Â  Â  Â  Â  No quiz could be generated for this topic.
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
}